#+SETUPFILE: ./setup.org
#+HUGO_SECTION: assignment
#+ORG_LMS_SECTION: assignment
#+HUGO_MENU: :menu main :parent Assignments

* COMMENT Hugo Instructions
- Every exportable entry must have the ~EXPORT_FILE_NAME~ property set before export.


** Check out this elisp code if you're having trouble

#+begin_src emacs-lisp
(use-package ox-hugo-auto-export)

#+end_src

#+RESULTS:

* Overview
:PROPERTIES:
:EXPORT_FILE_NAME: overview
:END:

testing out the overview
 


* Participation                                                  :assignment:
:PROPERTIES:
:EXPORT_FILE_NAME: Participation
:PUBLISH:  t
:ORG_LMS_EMAIL_COMMENTS: t
:ORG_LMS_CANVAS_COMMENTS: t
:DUE_AT: 2020-08-18
:GRADING_TYPE: letter_grade
:ASSIGNMENT_TYPE: canvas
:CANVAS_SUBMISSION_TYPES: (online_upload)
:ASSIGNMENT_WEIGHT: 0.15
:OL_PUBLISH: t
:CANVASID: 361848
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/157875/assignments/361848
:CANVAS_SUBMISSION_URL: https://q.utoronto.ca/courses/157875/assignments/361848/submissions?zip=1
:SUBMISSIONS_DOWNLOAD_URL: https://q.utoronto.ca/courses/157875/assignments/361848/submissions?zip=1
:GRADING_STANDARD_ID: nil
:END:
Participation in this class has two components:
- Synchronous Participation: Includes class attendance and participation *during* synchronous meetings (in Slack chat)
- Async Participation: Includes discussion that takes place in Slack *outside* of class meeting times.
** Rubric :rubric:
- *Synchronous Attendance* :: 
- *Async Participation* :: 
- *Grade* :: 
* Reflection 01: DH Project Profile :assignment:
:PROPERTIES:
:EXPORT_FILE_NAME: reflection-1-project-profile
:PUBLISH:  t
:DUE_AT: 2020-07-16
:GRADING_TYPE: letter_grade
:ASSIGNMENT_TYPE: canvas
:ASSIGNMENT_WEIGHT: 0.15
:CANVAS_SUBMISSION_TYPES: (online_upload)
:OL_PUBLISH: t
:BASECOMMIT: none
:CANVASID: 361849
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/157875/assignments/361849
:CANVAS_SUBMISSION_URL: https://q.utoronto.ca/courses/157875/assignments/361849/submissions?zip=1
:SUBMISSIONS_DOWNLOAD_URL: https://q.utoronto.ca/courses/157875/assignments/361849/submissions?zip=1
:GRADING_STANDARD_ID: nil
:END:

Your first assignment is to profile a Digital Humanities project, analyzing its research aims, its form and content, its interface, technologies, and intended audience. You will learn how to navigate Digital Humanities projects, how to identify and evaluate different aspects of such projects, and how to analyze the kinds of knowledge and digital artifacts    generated by DH projects. *Write-up: 800 words plus screenshots*.

You may select any project you like from the syllabus or from one of the pages below, with the caveat that *the project should be identifiably humanistic* in orientation. You should be able to articulate the aims of the project in ways that reflect *your existing understanding of what the humanities are*. 

- [[https://digitalhumanities.duke.edu/all-projects]] (please start here)
- [[https://eadh.org/projects]] 
- https://cdh.unc.edu/prsp-template/proj_init/
- https://digitalhumanities.berkeley.edu/projects
# - [[https://dhcommons.org/projects]] (Oops! Down right now!)

This project profile is not an essay; it is a short, 2-3 page report. You do not need to write a formal introduction, thesis, argument, or conclusion. You should only report on your observations, using the questions below as categories of analysis, each with its own heading. Not all categories and questions apply to all projects, so *do not feel obligated to respond to all of them*. Your project profile will be evaluated for [[http://www.artsci.utoronto.ca/newstudents/transition/academic/grading][accuracy, clarity, detail, quality of analysis, and insight]].


1. *Project:* What is the name of the project? Who are its primary authors? Be sure to include one or more links in the first paragraph of your assignment, so we can navigate quickly to the project itself. 

2. *Topic and Significance for the Humanities:* What is the project about? (Examples: What topic and historical period does it focus on? What texts or art works or other material does it collect, explain, map, or analyze? What questions is the project seeking to answer?)

3. *People & Institutions*: Who is the project leader? Who are their collaborators? What is the institution involved in the project's development? What are the granting bodies funding the projects? Is credit given to individual contributors? To what extent?

4. *Presentation & User Experience:* What is the “digital artifact” through which this project communicates its findings? A book? A game? A map? An edition? An archive? A tool? Another type of digital artifact?

   As a user external to the project, what steps did you take to explore the project? Can you understand how to read the project's data or how to use the tools it is building? As you explore the project, what do you find easy? What do you find difficult? What do you like? What do you dislike? Document your experience with screenshots, please ([[https://screenshots.firefox.com/][firefox's screenshot tool]] makes this very easy).

   Does this project provide access to users with e.g. limited bandwidth, minimal computing (e.g. smartphones instead of laptops), vision or hearing or tactile impairment?

5. *Data:*  What data does the project generate? What data format(s): text files, pdf files, digital images, databases, Excel or .csv files? Does the project provide narrative context for its data (that is, does it clearly explain what its data means and why it matters, for readers not familiar with the project)? Is access to project data open, subscription-only, or under a specific licence? May other scholars download the project's data?

6. *Technologies:* What technologies (encoding formats, digital publication platforms, software) are used in this project or built as part of this project? Are these technologies open-source, open-access?

7. *Audience:* Who is the intended audience for this project? That is, does this project primarily speak to laypeople? Scholars? Specialists? How can you tell?

8. *Limitations:* Does the project make note of any limitations in its work, any gaps or uncertainties in its data? Can you find limitations in its work---that is, gaps between its stated goals and its results?

This assignment is based on the [[https://dmptool.org/][DMP Tool]], the U of T DH Census Profile tool, and [[https://docs.google.com/document/d/1jp0bQ18hXKxekgACfBCw_6P6lO_xg4uzUXXMvT2jaPo/edit][Kristen Mapes]]' DH Project Critique assignment.

** Rubric :rubric: 
Components (check/no-check)
- [ ] topic
- [ ] people + institutions
- [ ] presentation + UX
- [ ] data
- [ ] technologies
- [ ] audience
- [ ] limitations


- *Grade* ::
- *Comments* :: 
* Reflection 02: Litany                                          :assignment:
:PROPERTIES:
:EXPORT_FILE_NAME: reflection-2-the-ruin
:PUBLISH:  nil
:DUE_AT: 2020-07-21
:GRADING_TYPE: points
:ASSIGNMENT_TYPE: canvas
:ASSIGNMENT_WEIGHT: 0.20
:CANVAS_SUBMISSION_TYPES: (online_upload)
:OL_PUBLISH: nil
:ASSIGNMENT_TYPE: canvas
:BASECOMMIT: none
:GRADING_STANDARD_ID: nil
:ID:       831680db-1f4c-441a-9b5d-28d30066ae13
:CANVASID: 361850
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/157875/assignments/361850
:CANVAS_SUBMISSION_URL: https://q.utoronto.ca/courses/157875/assignments/361850/submissions?zip=1
:SUBMISSIONS_DOWNLOAD_URL: https://q.utoronto.ca/courses/157875/assignments/361850/submissions?zip=1
:END:

Before completing this assignment, read the *recently revised, HTML version* of the handout “[[https://q.utoronto.ca/courses/157875/pages/reflection-02-handout-and-preliminary-exercises][Reflection 02: Handout and Preliminary Exercises]]” and carry out the exercises it asks you to do. Then [[https://github.com/DigitalHistory/poem-json-project/releases/][Download the project files from this location]]. After completion of the assignment, save all your changes to the project files and drop your essay into the same directory. Then save that directory as a zipfile and upload to Quercus. Here is the assignment itself: 

1. What is /A Litany in Time of Plague/? Briefly describe the poem and its themes. State what passage you are focusing on and analyze its poetic characteristics, as discussed in class. Be specific; cite poem by line numbers. Cite the poem correctly using the citation format of your choice.

2. What is “deformance,” as defined by McGann and Samuels, and how did you practice deformance on /A Litany in Time of Plague?/ Cite McGann and Samuels correctly using the citation format of your choice.

3. Describe the literary study methodology we used. Make sure you answer the following questions:

   1. What is TEI? How does it differ from our encoding of the poem as data? (Your own words, please.)

   2. What additions did you make to the poem data. What are these changes supposed to describe? Why did you choose them? 

   3. What did you learn from making these digital artifacts that simply reading the poem did not uncover? What is the most significant affordance of your tools and digital artifacts that enabled you to gain these insights? What /failed/ to work---that is, what was difficult or counterproductive about working with the poem this way? 

   4. How does your analysis work /with/ or /against/ the poem---that is, are you “breaking” or “recreating” the poem? Be as specific as possible.


** Evaluation 

This assignment is graded out of 20.

*** Intro (/4)

- A clear contextualization of the poem: its manuscript context, its historical period, and its content.

- A clear definition of “deformance” (McGann & Samuels).

*** Data Structure and Display (/6)

- Data structure has been modified and is free of syntax errors
- CSS has been modified and effectively trnasforms the visual presentation of the poem

*** Analysis (/6)

- Discussion of imagery, stylistic devices, literary strategies, and thematics of the poem is present

- Students' observations are specific -- that is, observations could not apply to any English poem (“alliteration creates rhythm in the poem”) or to any text (“verbs describe the action in the poem”); instead, they point out characteristics of this particular poem.

- Using their own data structures, students observe interesting poetic details and discuss these details' thematic effects

*** Clarity & Correctness (/4)

- Sentences are clear and vivid. Word usage, grammar, sentence structure, and punctuation are correct. Some informality is acceptable, as long as the reflection is clearly readable.

** Rubric 

- Grade :: 

| Part          | Score | out of | Comments |
|---------------+-------+--------+----------|
| Intro         |       |      4 |          |
| TEI           |       |      6 |          |
| Analysis      |       |      6 |          |
| Clear/Correct |       |      4 |          |

- General Comments :: 

* Reflection 02: Handout and Preliminary Exercises :assignment:
:PROPERTIES:
:PUBLISH:  nil
:CUSTOM_ID: the-ruin-digital-literary-studies
:EXPORT_FILE_NAME: reflection-2-handout
:CANVAS_EDITING_ROLES: teachers
:CANVASID: 451101
:CANVAS_PAGE_URL: reflection-02-handout-and-preliminary-exercises
:OL_PUBLISH: nil
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/157875/pages/reflection-02-handout-and-preliminary-exercises
:CANVAS_SHORT_URL: reflection-02-handout-and-preliminary-exercises
:END:
** 
In this assignment, you will *encode* a four-hundred-year-old poem using a generic data standard, *display* the marked-up text in a web browser using a computational translator, and *discuss* this exercise using the idea of *deformance* as a guide.  This handout *should* contain everything you need to complete the assignment, but please use the discussion forum to ask any technical (or other!) questions.
** The Poem: “A Litany in Time of Plague”, (1592) by Thomas Nashe
   :PROPERTIES:
   :CUSTOM_ID: the-poem-the-ruin-from-the-tenth-century-exeter-book-translated-by-sian-echard-silently-emended
   :END:

 "[[https://poets.org/poem/litany-time-plague][A Litany in Time of Plague]]" was initially written as part of a morality play, /Summer's Last Will and Testament/, by the Elizabethan playwright and pamphleteer [[https://en.wikipedia.org/wiki/Thomas_Nashe][Thomas Nashe]]. Untitled in that work, it was widely collected under several names in the 19th and 20th centuries before the current title was settled on. As Daniel Swift [[https://fsgworkinprogress.com/2020/05/01/poetry-in-a-time-of-plague/][reminds us]], "A litany is a prayer that takes the form of a series of petitions followed by a communal response: here, the kyrie eleison, 'Lord have mercy.'"
 
*** Text of the Poem
1. Adieu, farewell, earth's bliss;
2. This world uncertain is;
3. Fond are life's lustful joys;
4. Death proves them all but toys;
5. None from his darts can fly;
6. I am sick, I must die.
7. Lord, have mercy on us!

8. [@8]Rich men, trust not in wealth,
9. Gold cannot buy you health;
10. Physic himself must fade.
11. All things to end are made,
12. The plague full swift goes by;
13. I am sick, I must die.
14. Lord, have mercy on us!
 
15. [@15]Beauty is but a flower
16. Which wrinkles will devour;
17. Brightness falls from the air;
18. Queens have died young and fair;
19. Dust hath closed Helen's eye.
20. I am sick, I must die.
21. Lord, have mercy on us!
    
22. [@22]Strength stoops unto the grave,
23. Worms feed on Hector brave;
24. Swords may not fight with fate,
25. Earth still holds open her gate.
26. "Come, come!" the bells do cry.
27. I am sick, I must die.
28. Lord, have mercy on us!
    
29. [@29]Wit with his wantonness
30. Tasteth death's bitterness;
31. Hell's executioner
32. Hath no ears for to hear
33. What vain art can reply.
34. I am sick, I must die.
35. Lord, have mercy on us!
    
36. [@36]Haste, therefore, each degree,
37. To welcome destiny;
38. Heaven is our heritage,
39. Earth but a player's stage;
40. Mount we unto the sky.
41. I am sick, I must die.
42. Lord, have mercy on us!

** Deformance
   :PROPERTIES:
   :CUSTOM_ID: deformance
   :END:
We will discuss in class this [[https://en.wikipedia.org/wiki/Portmanteau][portmanteau]] term coined by Lisa Samuels and Jerome McGann, a combination of “deform” and “performance.” Be sure you have some grasp of what this means!

** Introduction to JavaScript Data Structures, HTML, and CSS

In class, we briefly discussed [[https://cdrh.unl.edu/articles/basicguide/TEI][TEI]], a widely-used  [[https://en.wikipedia.org/wiki/Markup_language][markup language]] used by scholars for producing semi-structured representations of literary texts. TEI is a format, or defined feature set, of the [[https://www.w3schools.com/xml/xml_whatis.asp][XML]] "metalanguage", a very widely-used system for structuring and processing many kinds of data, and it is very much worth learning if you are interested in pursuing literary DH. In this assignment, however, we will *not* be using TEI.  Instead, we will use an entirely different data format -- the [[https://www.json.org/json-en.html][JavaScript Object Notation]], which has emerged as a sort of successor to XML for many applications. We will be seeing JSON again later in the semester, so try hard to understand this part now.

*** Writing Code

In this assignment, as in DH in general, it's very important to use a *code editor* rather than a *word processor*.  My strong recommendation is that you install [[https://code.visualstudio.com/][Visual Studio Code]] and begin to familiarize yourself with this fundamental tool. You should also [[https://code.visualstudio.com/docs/languages/html#_does-vs-code-have-html-preview][install any of the several live-preview extensions discussed in this linked web page]].

However, Windows users may prefer the very lightweight [[https://notepad-plus-plus.org/downloads/][Notepad++]], while many Mac and Linux users enjoy [[https://www.sublimetext.com/3][SublimeText]]. If you're a programmer and already have a preferred editor, stick with what you're used to.

*** JavaScript Data Structures

All programming languages provide a variety of "data types" for storing information. In our example, the phone poem is represented as an [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array][Array]], which is essentially a list of items. You can tell it is an array because it starts with ~[~, ends with ~]~, and the individual items are delimited by ~,~ (commas). Each item in the array is a JavaScript [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects][object]] representing a poem stanza.  Objects are more complex data structures made up of so-called properties or [[https://javascript.info/object][key-value pairs]]: the whole object is delimited by "curly braces" (~{...}~), and each "property" of the object has two parts: the name, or key, followed by a colon, and then the value. Properties are separated by commas, just like array items:

#+begin_src js
{
  key1: value1,
  key2: value2
  }
#+end_src

Property values can be [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_and_Structure_types][any valid JavaScript data type]], so they can themselves have internal structure.  A value might be a number, a [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type][string]], an array, or even another object.  That means an object can contain hierarchical structures of objects within objects, like the Matryoshka dolls we saw in a lecture slide. Here's an example of such a data structure:

#+begin_src js
{
  key1: value1,
  key2: {
    key2a: value2a,
    key2b: [value2b1, value2b2, value2b3]
  }
}
#+end_src

In this case, we are creating a representation of the poem for later display in a browser.  The poem contains parts (stanzas) which themselves contain parts (lines) which themselves contain parts (words, punctuation, and indentations). So it will make sense to use a "nested" or hierarchical structure of elements to represent the poem as a whole.

*** HTML Structures
[[https://en.wikipedia.org/wiki/HTML][HTML]] presents a document as a hierarchy of nested elements (much as discussed in the previous section), which the browser displays according to a set of rules.  A normal HTML document might look something like this:

#+begin_src html
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8"/>
        <title>Document Title</title>
    </head>
    <body>
        <h1>Top-Level Heading</h1>
        <p>Pragraph containing <em>italicized</em> and <strong>bold</strong> text, as well as <a href="https://google.com">a link to Google</a>.</p>
    </body>
</html>
#+end_src

The indentation hopefully helps you to see the nested structure.  The "root" element is of type "html, and has two direct "children", "head", and "body", each of which has several children of its own.  The "p" element then has several of its own children.  

*** CSS Instructions
HTML provides a structure.  [[https://developer.mozilla.org/en-US/docs/Web/CSS][CSS]] controls the *presentation* or *display* of the elements in that structure.  The CSS language is relatively simple, and is composed of *rulesets* that apply to one or more *selectors*. These rulesets contain key-value pairs of *properties* and *values*. For instance, the default css file in your assignment contains the following rulesets:

#+begin_src css
stanza {
    border: black solid 2px;    /*add a border around stanzas*/
    margin: 5px;                /*with margins so that borders don't run into each other! */
    display: block;             /*this is important! display on its own line*/
}

/* .... [bunch of other stuff] ...  */

.death {
    color: #991111;
    background-color: rgba(4,4,4,0.3);
    font-weight:700;
}

#+end_src

Each ruleset starts with the *selector*. The first is ~stanza~, while the second is ~.death~. Take note of that initial ~.~ in ~.death~, I'll say more about it in a second.  

After the selector is a set of curly braces, ~{ ... [bunch of stuff] ..}~, and in between the braces you can find the rules themselves, which look a lot like JavaScript object properties: ~property-name: value;~. Notice, though, that the line ends in ~;~ (semi-colon) rather than a ~,~ (comma). There is an immense amount to learn in CSS, and [[https://developer.mozilla.org/en-US/docs/Learn/CSS][I encourage you to teach yourself as much as you like]]. The default file contains some common examples:
- border: creates a border around the selected elements
- margin: adds space to the top, bottom, left, and right of the selected elements
- display: tells the browser how to manage the selected element in the document flow:
  - *block* means "give this element its own line,
  - *inline* means "use the line (or box) that the parent element has already defined
  - *none* means "just don't use display this element at all
- color and background-color: the text color for the element's contents and their background. See [[https://developer.mozilla.org/en-US/docs/Web/HTML/Applying_color][this tutorial]] for more details, and especially [[https://developer.mozilla.org/en-US/docs/Web/HTML/Applying_color#How_to_describe_a_color][the section "how to describe a color"]] for instructions on valid color values
- a few others that you can look up on the web (there are excellent tutorials everywhere, and one goal of this course is to accustom you to using web resources to teach yourself technical skills)

** Reading Hints
   :PROPERTIES:
   :CUSTOM_ID: reading
   :END:

- Content: Read the poem. Flag any parts that are unclear or mysterious or confusing. Summarize its content in one sentence.
- Style: Look for:
  - verbal patterns (e.g. sentences with the same shape) : what are they? What is their effect?
  - sensory imagery (e.g. references to what you can see, hear, touch, feel): any patterns? What do they do for the poem?
  - sounds: rhymes, [[https://www.google.com/search?client=firefox-b-d&q=alliteration][alliteration]], [[https://www.google.com/search?client=firefox-b-d&q=alliteration#dobs=assonance][assonance]]. Note these devices, and think about how they affect your understanding of the poem
- Theme: if you had to summarize the theme of your passage in one word, what would that word be? How does style support or embody theme?
** Encoding: the initial file
   :PROPERTIES:
   :CUSTOM_ID: encoding
   :END:

Your assignment package contains the file ~poem.js~, which defines a single global variable ~poem~ with a "starter kit" encoding the entire poem in a primitive data structure of this form:

#+begin_src js
let poem = [
/* ... headers and stuff first, and then this */
{
    "type": "stanza",
    "class": "",
    "content": [
      {
        "type": "line",
        "class": "",
        "content": [
          {"type": "word", "content": "Adieu", "class": "", "meta": ""},
          {"type": "punctuation", "content": ",", "class": "", "meta": ""},
          {"type": "word", "content": "farewell", "class": "", "meta": ""},
          {"type": "punctuation", "content": ",", "class": "", "meta": ""},
          {"type": "word", "content": "earth's", "class": "", "meta": ""},
          {"type": "word", "content": "bliss", "class": "", "meta": ""},
          {"type": "punctuation", "content": ";", "class": "", "meta": ""}
        ]
      }
    /* ... etc */ 
    ]
  }
  /*... other stanzas follow */
]
#+end_src

This encoding was produced automatically from the original text of the poem, as found in ~poem.txt~. If you are interested in the original code, see ~tokenizer.js~ and the brief discussion in [[https://github.com/DigitalHistory/poem-json-project#poetry-project-for-students-on-dh235][the online code repository for this assignment]]. 

The data structure for the poem is an *array* of *objects*. Each object has up to four *attributes*:
- type: a *string* initially set to *stanza*, *line*, *word*, or *punctuation*
- content: either a *string* containing a word, a punctuation mark, or a number of spaces, or a *nested object* with the same structure as the parent
- class: in the file you receive, this is *always* set to an *empty string* or ~null~. You will want to change these values
- meta: like ~class~, this is set to an empty string or null/undefined, and you will likely want to modify the meta value of some words.

This data structure serves as input to a JavaScript program that uses it to create a *nested structure of HTML nodes* for display to a reader. This script included in your assignment, and you are welcome to inspect or even modify it, but you are not required to do so.  For each unit in the data structure,  attributes will be translated in the following way:
  - ~type~ defines the *HTML tag name* of a new  [[https://developer.mozilla.org/en-US/docs/Glossary/Element][HTML element]]
  - ~content~ defines the full contents of that element
  - ~class~ adds one or more *[[https://www.w3schools.com/html/html_classes.asp][HTML classes]]* to the element
  - ~meta~ defines the content of a "[[https://www.w3schools.com/css/css_tooltip.asp][tooltip]]" that appears on the tag's contents when the reader's mouse hovers over it

  So, for instance, the fragment above will produce the following HTML:

  #+begin_src html
  <stanza>
      <line>
          <word>Adieu</word>
          <punctuation>,</punctuation>
          <word>farewell</word>
          <punctuation>,</punctuation>
          <word>earth's</word>
          <word>bliss</word>
          <punctuation>;</punctuation>
      </line>
  </stanza>
  #+end_src

Your job (see next section) is to modify this default data structure so that the reader sees something different.

** Encoding: your assignment

By default, the poem is already properly displayed. Your assignment is to highlight or remove certain features of the poem in two steps:
- first, *add extra information to the underlying data structure*. Choose particular items -- individual words, lines, punctuation marks, or stanzas -- and consider doing some of the following:
  - add *classes* to words that have some common characteristic.  If you're interested in rhymes, you can tag rhyming words (you could even distinguish A and B rhyming couplets in a given stanza). If you are interested in a particular theme, choose a class name for words that are associated with that theme. If you have identified some other characteristic as relevant to your interpretation of the poem, find a way to formalize that relationship through a carefully-chosen classname.
  - add *meta* to the item, to provide context to the reader as they encounter the poem.
  - If you are so inclined, think about whether the currently-chosen element structure (of words and punctuation marks) is the best classification scheme. Make changes if you have a better idea.
- second, *adjust the display of the poem units* to "deform" the text in a manner that transforms the reader's interpretation.  Do this by editing ~poem.css~ in your assignment package, changing or adding rules for some of the existing rulesets, and adding new rulesets for selectors that match your new classes.

So for instance, let's make a few changes to the underlying data:

#+begin_src js
let poem = [
/* ... headers and stuff first, and then this */
{
    "type": "stanza",
    "class": "",
    "content": [
      {
        "type": "line",
        "class": "",
        "content": [
          {"type": "word", "content": "Adieu", "class": "bye", "meta": ""},
          {"type": "punctuation", "content": ",", "class": "", "meta": ""},
          {"type": "word", "content": "farewell", "class": "bye", "meta": "why the heck does he say 'bye' twice?"},
          {"type": "punctuation", "content": ",", "class": "", "meta": ""},
          {"type": "word", "content": "earth's", "class": "", "meta": ""},
          {"type": "word", "content": "bliss", "class": "goodstuff", "meta": ""},
          {"type": "punctuation", "content": ";", "class": "", "meta": ""}
        ]
      }
    /* ... etc */ 
    ]
  }
  /*... other stanzas follow */
]
#+end_src

This will produce the following HTML:
  #+begin_src html
  <stanza>
      <line>
          <word class="bye">Adieu</word>
          <punctuation>,</punctuation>
          <word class="bye tooltip-reference">farewell
              <tooltip>
                Why the heck does he say 'bye' twice?
              </tooltip>
          </word>
          <punctuation>,</punctuation>
          <word>earth's</word>
          <word class=goodstuff>bliss</word>
          <punctuation>;</punctuation>
      </line>
  </stanza>
  #+end_src

the tooltip will show up automatically. Now let's add some color to the newly-classed elements by adding to poem.css:
#+begin_src css
.bye {
    color: red;
}

.goodstuff {
    color: gold;
}
#+end_src

Now reload the poem in your browser (or live preview in your text editor), and you'll see the changes!

We'll practice this process in class, using a different poem.


** Discussion Section of the Assignment
   :PROPERTIES:
   :CUSTOM_ID: encoding-discussion
   :END:

Describe the changes you made to the poem data and the CSS rules that govern its display. Why did you choose these particular classes & meta fields? Are you satisfied with the results? Did you properties of the poem become more apparent to you after representing the poem in this particular way? If so, describe these properties. Are you convinced that this work meets the definition of "deformance" as described in the text? Is it a useful concept?

* COMMENT Leftover XML stuff
** COMMENT Introduction to XML,XSLT, TEI, and HTML (!)
   :PROPERTIES:
   :CUSTOM_ID: introduction-to-tei
   :END:
[[https://cdrh.unl.edu/articles/basicguide/TEI][TEI]] is a [[https://en.wikipedia.org/wiki/Markup_language][markup language]] -- a system for annotating documents that can be read an processed by other compute programs.  It is a format, or defined feature set, of the [[https://www.w3schools.com/xml/xml_whatis.asp][XML]] "metalanguage", a very widely-used system for structuring and processing many kinds of data.  Digital humanists use TEI to turn literary texts into structured data that can be manipulated and queried in many ways, but especially on the web.  

The process of turning a TEI document into a visual representation on a screen is complex:
- first, the text must be *marked up* -- textual elements must be identified and annotated (we'll discuss how this works in more detail very soon).  This work can be both painstaking and tedious
- next, a *translation scheme must be written* that /processes/ the xml text into [[https://en.wikipedia.org/wiki/HTML][HTML]], the main language of the web. This translation is almost always written in a language called [[https://en.wikipedia.org/wiki/XSLT][XLST]] (which is itself a dialect of XML)
- finally, the translated document must be *displayed by a browser* that understands HTML, like Firefox or Chrome.   

Becasue this topic is so immense, we will not be producing fully TEI-compliant documents in this class -- instead, we will make TEI-like XML and process those docs into super-simple HTML documents.  

So, in order to complete this assignment, you must learn at least a tiny bit about *XML*, *XSLT*, and *HTML*.  That's a lot! I won't give you a systematic introduction to any of these systems; instead, this handout presents a very small amount of information on each, and gives some examples of how you might use them in the assignment. 

*** Viewing
   :PROPERTIES:
   :CUSTOM_ID: viewing
   :END:

To view/work with XML files, please navigate to either of these xml/xslt live editors:
- [[http://fiddle.frameless.io/][XML fiddle]] (this one at least has syntax highlighting, which makes the code a bit easier to read). 
- [[https://www.w3schools.com/xml/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog][W3 Schools]] (I don't like this one as much)


*Paste your XML poem into the left window of the editor.* Start with this code:  
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<poem>
  <l n="1">This <concrete-noun>wall-stone</concrete-noun> is wondrous; fates broke it</l>
  <l n="2"><concrete-noun>courtyard pavements</concrete-noun> were smashed; the work of giants is decaying.</l>
  <l n="3"><concrete-noun>Roofs</concrete-noun> are fallen, ruinous <concrete-noun>towers</concrete-noun>,</l>
  <l n="4"> the frosty gate with frost on cement is ravaged, </l>
</poem>
#+end_src

*Paste your XSLT (your script for turning XML into HTML) into the right window of the browser.* Again, here is some starter code:

#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/">
    <html>
      <body>
        <h1>The Ruin</h1>
        <xsl:for-each select="poem/l/concrete-noun">
          <p> <xsl:value-of select="current()"/> </p>
        </xsl:for-each>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>
#+end_src

*** XML Essentials: Tags & Structures

XML "marks up" elements of a text by surrounding bits of text with [[https://www.w3schools.com/xml/xml_syntax.asp][tags]]. The totality of ~<starting-tag>Content</end-tag>~ is called an [[https://www.w3schools.com/xml/xml_elements.asp][XML element]]. 

Take this example (stolen from [[https://www.w3schools.com/xml/xml_elements.asp][W3Schools]]): 
#+begin_src xml
  <book category="children">
    <title>Harry Potter</title>
    <author>J K. Rowling</author>
    <year>2005</year>
    <price>29.99</price>
  </book>
#+end_src

Here we have a *root element* called ~<book>~ which encloses several [[https://www.w3schools.com/xml/xml_tree.asp#midcontentadcontainer][child elements]] (~<title>~, ~<author>~, etc). Everything between ~<book category="children">~ and ~</book>~ is part of the ~<book>~ element.  In general, an element has the structure:

- opening tag: ~<tag>~
- content: text and child elements, which must be fully nexted within the parent (if an opening tag is inside the element, the closing tag must *also* be inside it
- closing tag: ~</tag>~ . Note the forward slash */* within the ~<>~ greater-than less-than signss.

Here's a trivial example that you might find in a TEI document:

#+begin_src  xml
<l>And then my lord <person>Yvain</person> arrived in <place>Camelot</place>.</l>
#+end_src

The tags here are "l", "person", and "place".

**** The XML declaration
:PROPERTIES:
:CUSTOM_ID: xml-dec
:END:

Every real XML document must also begin with an "XML Declaration" which identifies it as an XML document.  It will look like this: 

#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
#+end_src

And a very simple full document will look like this:
#+NAME: simple-xml
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<poem>
  <l n="1">This wall-stone is wondrous; fates broke it</l>
  <l n="2">courtyard pavements were smashed; the work of giants is decaying.</l>
  <l n="3">Roofs are fallen, ruinous towers,</l>
  <l n="4"> the frosty gate with frost on cement is ravaged, </l>
</poem>
#+end_src

*** Displaying XML with XSLT
A document that has been marked up with XML now has a structure that a computer can understand, which is great! But a web browser will not know how to display that document unless we give it instructions for *transforming* the XML structure into a language that the browser understands. We use XSLT for this purpose -- a special language that exists to manipulate XML documents.  

XSLT is complicated, and we will use just a tiny part of it.  We need to understand just a few concepts: 
- *stylesheet declaration* surrounds the rest of the XSLT document, identifying it as an XSLT instruction set
- *[[https://www.w3schools.com/xml/xsl_templates.asp][templates]]* give instructions for transforming particular XML elements
- *[[https://www.w3schools.com/xml/xpath_syntax.asp][Xpath Expressions]]* are used to tell the templates which elements to transform
- *value statements* insert the contents of an element into the final HTML product

**** Stylesheet Declaration
An XSLT Stylesheet always starts with an XML declaration and then an ~<xsl:stylesheet>~ tag; the document ends with the closing ~</xsl:stylesheet>~ tag:

#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<!-- Content of Stylesheet Goes Here!! -->

</xsl:stylesheet>
#+end_src

**** XSLT Templates

Inside the ~xsl:stylesheet~ we put all the ~xsl:template~ tags we need.  Each template is an instruction for dealing with a particular tag or set of tags.  So, if we use [[simple-xml][our simple XML file from above]] as the XML source, we might start by building an XSLT document like this:

#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
      <xsl:apply-templates/>
  </xsl:template>


  <xsl:template match="l">
    <p> <xsl:value-of select="."/> </p>
  </xsl:template>
</xsl:stylesheet>
#+end_src

What's happening here?  We have two templates. The first one "matches" the "root element", while the second one matches all the "l" elements. So if we read this document top to bottom, we might translate it this way: 
#+begin_example
I am an XML Document

Begin Stylesheet

   Begin Template for the root element
        Apply all Templates!
   End Template for the root elements

   Begin Template for each l element
        Return a line of code that reads:
        "<p> + content of the "l" element + </p>"
        (this creates one HTML paragraph for each "l" element in the original)
   End Template for the L Elements

End Stylesheet
#+end_example

Our original XML document is very simple, so we don't need much more than this. But as we'll see later, it can get much more complicated.  And in fact we can make it a little more sophisticated already by adding a bit more complexity: 

#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:template match="/">
    <body>
      <h1>Grand title</h1>
      <p>Let us begin our discussion of poetry here.</p>
          <xsl:apply-templates/>
    </body>
  </xsl:template>

  <xsl:template match="poem">
    <h2>The Ruin</h2>
          <xsl:apply-templates/>    
  </xsl:template>

  
  <xsl:template match="l">
    <p> <xsl:value-of select="."/> </p>
  </xsl:template>

</xsl:stylesheet>
#+end_src

Try to read the text and understand what's going on!

Now let's learn a little bit more about how the ~match~ and ~select~ attributes in the above code really work. 

**** Xpath Expressions
When we make templates with a ~match~ attribute, or use the ~value-of~ and ~apply-templates~ instructions (see below), we have to tell XSLT which XML elements we are talking about. The selection of elements is done using what are called "[[https://www.w3schools.com/xml/xpath_syntax.asp][Xpath Expressions]]". These are a way to describe the position of elements (sometimes called "nodes") in the XML document. The syntax is extemely complex, so we will just say a few things about it here: 

- "/" refers to the root element -- the element that contains all the other elements in the document
- ="/poem"= refers to a ~<poem>~ element *at the document root*, while "poem" refers to *any poem element in the document*.  So for instance, "l" will match all of our ~<l>~ elements, but ="/l"= *won't match anything,* because the existing ~<l>~ elements are all /inside the poem element/.
- "current()" and "." both refer to the *element that is being discussed at the present moment*. So, inside of ~<xsl:template match="poem">...</xsl:template>~, ~"."~ refers to the ~<poem>~ element.
- "@n" refers to the "attribute" *n*. I'll explain more about this in a second...

**** Value Statements (~value-of~ and ~apply-templates~)
We almost always want to get the value of the XML elements -- otherwise why would we do all this work? There are two ways to get that value...

***** [[https://www.w3schools.com/xml/ref_xsl_el_value-of.asp][xsl:value-of]]: the simple way
~<xsl:value-of select="."/>~ just grabs the content of the element and inserts it in the final output.  We don't use it much (see below for reasons), but it can be particularly helpful when we care about *attributes*.  So for instance, consider this line of XML: 

#+begin_src xml
<l n="2">courtyard pavements were smashed; the work of giants is decaying.</l>
#+end_src

Maybe we really care that this is line 2! Maybe we want to display those line numbers so readers understand what we're talking about! We can use the "@n" syntax we saw just above: 

#+begin_src xml
<xsl:value-of select="@n"/>
#+end_src

When this instruction is applied to the line above, it will return the number "2"!

***** [[https://www.w3schools.com/xml/xsl_apply_templates.asp][xsl:apply-templates]]: the better way (usually)
Most of the time, we use ~<xsl:apply-templates/>~ instead of ~<xsl:value-of select="."/>~.  This is because *we usually can't be sure that the element doesn't contain other elements.* And if we just use "value-of", then the elements inside our current element won't be properly translated.  "apply-templates" will check to see if any templates need to be applied internally, and then after those templates have been applied, it will return the whole resultant text.  

All of this is really helpful -- but since we're generating HTML, you *also* need to know a little bit of HTML to make the text look the way you want it to!
**** HTML Tags and attributes

I won't go into HTML in much depth -- there are many many /many/ resources available online.  Here we'll just describe a few very basic features. 

Like XML documents, HTML documents contain *elements* delimited by *tags*. Also like in XML, those tags can have *attributes* that give extra information.  Here are some tags you may want to use in your work:

#+begin_src html
<html>
  <body>
    Every HTML document should start with a "html" tag and include a "body" tag inside it.

    <h1>first-level header</h1>
    <h2>second=level header</h2>
    (etc up to "h6")
    <p>
      paragraph containing <strong>bold</strong> and <em>italic</em> text.
      Paragraphs can also contain
      <span>
        tags, which don't do anything by default...
        but wait!
      </span>
    </p>
    <p style="color;white;background-color:red;border:2px solid black; padding: 10px;">
      This paragraph will have white text, a red background, a black border,
      and lots of space around it. Meanwhile, this
      <span style="color:red;background-color:green">
        will be entirely invisible to red-green colorblind readers.
      </span>  
    </p>

    <table>
      <tr>
        <td>this is a </td>
        <td>table with</td>
        <td>1 row and 3 columns</td>
      </tr>
    </table>

    
  </body>
</html>
#+end_src
- *p* tags are paragraphs
- *h1, h2... h6* tags are headers
- *span* tags delineate text within a paragraph
- *strong* and *em* do bold and italics
- You can build tables using the somewhat complicated syntax above
- you can set style attributes using the "style=" commands as you see them above; I've shown a few possibilities but there are literally hundreds more.  

Hopefully this should be enough for you to get started!
*** Learn more

The [[https://developer.mozilla.org][Mozilla Developer Network]] is the best starting point for almost all technical topics related to the web.  The [[https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction][XML Introduction]], [[https://developer.mozilla.org/en-US/docs/Web/XSLT][XSLT Intro]], and [[https://developer.mozilla.org/en-US/docs/Web/HTML][much more extensive HTML information]] are all very helpful, and contian links to further information. 

The [[https://tei-c.org/][TEI website]] has extensive information about the TEI standard, but is extremely technical. [[http://teibyexample.org/modules/TBED04v00.htm][TEI By Example]] can be quite helpful, but again, is very detailed.  The full text of /[[https://books.openedition.org/oep/426][What is the Text Encoding Initiative]]/ is available online and may also be helpful. The University of Nebraska's  [[https://cdrh.unl.edu/articles/basicguide][Basic Guide to Text Encoding]] is a lightweight introduction that may be easier to follow than any of the above!

** COMMENT Appendix: More Complex Example
   :PROPERTIES:
   :CUSTOM_ID: appendix-more-complex-example
   :END:

It may help you to see a few more tags. Here is a slightly more complex example, with a more completely marked-up selection of the poem. I have *not* annotated this example, but it showcases a few more features of the systems we're learning.  In particular, this example introduces:
- [[https://www.w3schools.com/cssref/css_colors_legal.asp][more complex colors]]
- [[https://www.w3schools.com/tags/tag_a.asp][the "a" or hyperlink tag]]
- [[https://stackoverflow.com/questions/10395488/how-to-concat-a-string-to-xslvalue-of-select][curly braces as a shortcut for xpaths]]
- [[https://stackoverflow.com/questions/11744465/xpath-difference-between-node-and-text][the somewhat confusing xpath test "node"]], which sometimes makes sense to use when "current()" doesn't produce the effect you want.
 
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<poem>
  <l n="1">This <concrete-noun>wall-stone</concrete-noun> is <adjective>wondrous</adjective>; <hyperbole>fates broke it</hyperbole></l>
  <l n="2"><concrete-noun>courtyard pavements</concrete-noun> were smashed; the <concrete-noun>work</concrete-noun> of <concrete-noun>giants</concrete-noun> is decaying.</l>
  <l n="3"><concrete-noun>Roofs</concrete-noun> are fallen, ruinous <concrete-noun>towers</concrete-noun>,</l>
  <l n="4"> the frosty <concrete-noun>gate</concrete-noun> with <concrete-noun>frost</concrete-noun> on <concrete-noun>cement</concrete-noun> is <hard-word>ravaged</hard-word>, </l>
</poem>
#+end_src

#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:template match="/">
    <html>
      <body>
        <h1>The Ruin</h1>
        <table>
          <xsl:apply-templates select="node()"/>
        </table>
      </body>
    </html>
  </xsl:template>

  <xsl:template match="poem">
    <table>
      <xsl:apply-templates select="node()"/>
    </table>
  </xsl:template>

  <xsl:template match="l">
    <tr>
      <td style="padding-right:10px; color:gray">
        <xsl:value-of select="@n"/>
      </td>
      <td style="color:white;">
        <xsl:apply-templates select="node()"/>
      </td>
    </tr>
  </xsl:template>

  <xsl:template match="concrete-noun">
    <strong style="color:black;">
      <xsl:apply-templates select="node()"/>
    </strong>
  </xsl:template>
  <xsl:template match="adjective">
    <span style="color:green">
      <xsl:apply-templates select="node()"/>
    </span>
  </xsl:template>

  <xsl:template match="hyperbole">
    <span style="background-color: rgba(250,20,20,0.3)">
      <xsl:apply-templates select="node()"/>
    </span>
  </xsl:template>

  <xsl:template match="hard-word">
    <a style="background-color: rgba(20,250,20,0.3)" href="https://www-oed-com.myaccess.library.utoronto.ca/search?q={current()}">
      <xsl:apply-templates select="node()"/>
    </a>
  </xsl:template>

</xsl:stylesheet>

#+end_src
* Reflection 03: Data visualization Reflection                   :assignment:
:PROPERTIES:
:EXPORT_FILE_NAME: reflection-3-data-visualization
:PUBLISH:  t
:DUE_AT: 2020-08-07
:GRADING_TYPE: points
:ASSIGNMENT_TYPE: canvas
:ASSIGNMENT_WEIGHT: 0.10
:CANVAS_SUBMISSION_TYPES: (online_upload)
:OL_PUBLISH: t
:PUBLISH: t
:BASECOMMIT: none
:GRADING_STANDARD_ID: nil
:CANVASID: 380260
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/157875/assignments/380260
:CANVAS_SUBMISSION_URL: https://q.utoronto.ca/courses/157875/assignments/380260/submissions?zip=1
:SUBMISSIONS_DOWNLOAD_URL: https://q.utoronto.ca/courses/157875/assignments/380260/submissions?zip=1
:END:

In approximately 600-800 words, briefly discuss the *Tableau* software we used in the Data Visualization workshop, considering in particular its uses and limitations when it comes to *dealing with humanities data* (remember [[http://www.digitalhumanities.org/dhq/vol/5/1/000091/000091.html][Johanna Drucker's essay on graphical display in the humanities!]]).  This assignment will be marked as most short essays normally are: it should present a coherent account of the tool and your experience with it. This description should not be considered a checklist of boxes you must tick off, but instead a set of suggestions for directions you might take in what is after a ll a very brief assignment.  

- briefly introduce the tool, describing its main features and uses
- Assess the tool's usability, and describe its principal user base
- describe the *characteristics of the data Tableau can make use of*, and any limitations on that data
- describe the *kinds of output* that Tableau produces, and again, any limitations
- Does the tool make hidden assumptions about the nature of knowledge, and do we learn anything form making those assumptions explicit? (Here it may be particularly useful to refer to Drucker's essay.)
- How might you make use of this tool in your own work *as a digital humanist*? Give a hypothetical example, in as much detail as you can muster.
- Does the exercise give you any insight into the COVID-19 visualizations you have been routinely following since the beginning of the pandemic? 

** COMMENT Rubric *rubric* 
- *Grade* ::
- *Comments* :: see inline
* Final Project: Consultation                                    :assignment:
:PROPERTIES:
:EXPORT_FILE_NAME: consultation
:PUBLISH:  t
:DUE_AT: 2019-10-25
:GRADING_TYPE: pass_fail
:ASSIGNMENT_TYPE: other
:ASSIGNMENT_WEIGHT: 0.01
:CANVAS_SUBMISSION_TYPES: (none)
::OL_PUBLISH: nil
:BASECOMMIT: none
:GRADING_STANDARD_ID: nil
:CANVASID: 233039
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/127426/assignments/233039
:CANVAS_SUBMISSION_URL: https://q.utoronto.ca/courses/127426/assignments/233039/submissions?zip=1
:SUBMISSIONS_DOWNLOAD_URL: https://q.utoronto.ca/courses/127426/assignments/233039/submissions?zip=1
:OL_PUBLISH: nil
:END:

** Rubric                                                           :rubric:
- *Grade:*
* Final Project: Proposal :assignment:
:PROPERTIES:
:EXPORT_FILE_NAME: book-project-proposal
:PUBLISH:  t
:DUE_AT: 2019-11-01
:GRADING_TYPE: letter_grade
:ASSIGNMENT_TYPE: canvas
:ASSIGNMENT_WEIGHT: 0.09
:CANVAS_SUBMISSION_TYPES: (online_upload)
:OL_PUBLISH: t
:BASECOMMIT: none
:GRADING_STANDARD_ID: nil
:CANVASID: 233042
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/127426/assignments/233042
:CANVAS_SUBMISSION_URL: https://q.utoronto.ca/courses/127426/assignments/233042/submissions?zip=1
:SUBMISSIONS_DOWNLOAD_URL: https://q.utoronto.ca/courses/127426/assignments/233042/submissions?zip=1
:END:

Please use this page to hand in your project proposals. For a description of the assignment, see the main project assignment page. 

** Rubric :rubric:
- Description of book and ban ::
- Feasibility of Project ::
- Style & Grammar  ::
- *Grade* :: 
* Final Project: Book Exhibit :assignment:
:PROPERTIES:
:PUBLISH:  t
:DUE_AT: 2020-08-14
:GRADING_TYPE: letter_grade
:ASSIGNMENT_TYPE: canvas
:ASSIGNMENT_WEIGHT: 0.35
:CANVAS_SUBMISSION_TYPES: (online_upload)
:OL_PUBLISH: t
:BASECOMMIT: none
:GRADING_STANDARD_ID: nil
:EXPORT_FILE_NAME: book-project-assignment
:CANVASID: 376866
:CANVAS_HTML_URL: https://q.utoronto.ca/courses/157875/assignments/376866
:CANVAS_SUBMISSION_URL: https://q.utoronto.ca/courses/157875/assignments/376866/submissions?zip=1
:SUBMISSIONS_DOWNLOAD_URL: https://q.utoronto.ca/courses/157875/assignments/376866/submissions?zip=1
:END:
** Overview
   :PROPERTIES:
   :CUSTOM_ID: overview
   :END:

In this assignment, you get to tell the story of a work of *plague literature*, broadly construed:  probably a book, but possibly some other cultural artifact such as a film or other work of art. 

You will create a website that features a digital collection and exhibit about that work, using the free, open-source content management platform Omeka. Like a good museum curator, you will bring together a gallery of exciting pictures, and you will guide your visitors through that gallery through a well-researched, interesting narrative about your subject.

- Your digital collection will catalogue evidence about your book: photographs of the book itself (title page, illustrations, marginal annotations, damage, other interesting features); images of related books from other museums; manuscript illuminations; other relevant multimedia. Each object of your digital collection will be described systematically, as books are described in a library catalogue.

- Your exhibit will be a guided tour about your work and the circumstances under which it was banned.

- You will use some digital technology as part of this assignment.

This is a scaffolded assignment: that is, you will produce several components at each stage, and each component builds on the ones before it-- like LEGO, except you get to build your own bricks.

** Learning Goals
   :PROPERTIES:
   :CUSTOM_ID: learning-goals
   :END:

By the end of this learning module, you will have learned:

- How to understand your book's significance, history, and meaning, in its historical context;

- How to treat 

- How to think about the transmission and attempted restriction of knowledge in different technological platforms (manuscripts, printed books, digital media)

- How to build an exhibit around objects and their history;

- What metadata is, and why metadata matters

- What Omeka is, and what content management systems are
  
- How to create your own Omeka site: building items, creating digital collections and building exhibits featuring scholarly materials
  
** What You Hand In:
   :PROPERTIES:
   :CUSTOM_ID: what-you-hand-in
   :END:

1. A proposal describing, in 200 words or fewer, the object whose story you plan to tell: what it is; what illness (real or fictional) it depicts, and a brief summary of the importance of that illness in the work's construction; in what historical context; and how you plan to shape your exhibit. *Due <2020-08-04 Tue>*

2. *At the same time as the proposal*, n annotated bibliography ([[http://advice.writing.utoronto.ca/types-of-writing/annotated-bibliography/]]) that contains: links to and descriptions of at least 3 things for your collection; references to and summaries of at least 3 *scholarly* sources (scholarly print books, scholarly journal articles, scholarly encyclopedia entries).

3. A complete digital exhibit website that contains your collection of objects and a narrative about that collection. For reference, a former student's UofT Library Research Prize-winning example of such a digital exhibit is described in detail here: [[https://tspace.library.utoronto.ca/handle/1807/88308][Jaya Thirugnanasampanthan's exhibit on /Thirteen Reasons Why/'s banning in the U.S.]] (you will have to click through a bit to find [[https://play.library.utoronto.ca/download/XPYcIMVV80N4][a link to a walkthrough of the site]]).  *Due <2020-08-14 Fri>*

** Proposal
   :PROPERTIES:
   :CUSTOM_ID: proposal
   :END:

*100-200 words*: describe your book and the structure of your exhibit.

*Sample Proposal*

| *Example*                                                               | *Discussion*                                 |
|-------------------------------------------------------------------------+----------------------------------------------|
| My exhibit focuses on Ana Blandiana's /Întâmplări de pe strada mea/     | One sentence identifying your object and     |
| (‘Events From My Street'), a Romanian children's book, which was banned | its place/time of origin.                    |
| in Romania during the Ceaușescu regime.                                 |                                              |
|                                                                         |                                              |
| I will discuss this book from the following points of view:             | An overview of your exhibit: its sections    |
|                                                                         | and some of its objects.                     |
|                                                                         |                                              |
| *Book* I will describe the book itself, published in 1988 and banned    | Describe the book itself.                    |
| shortly afterwards.                                                     |                                              |
|                                                                         |                                              |
|                                                                         |                                              |
|                                                                         |                                              |
|                                                                         |                                              |
| *Ban or Challenge*. I discuss why the book was scrutinized by the       | You will probably have less to say in your   |
| Communist regime. Some items here include: photos of the pages with the | proposal: that is FINE. Indicate who banned  |
| poem “A star on my street,” a poem about a boastful kitten which was    | the bool, and why, and how your exhibit will |
| interpreted as a criticism of the dictator Ceausescu and caused the     | show this.                                   |
| book to be scrutinized by the Securitate (the secret police); archival  |                                              |
| photos of schoolchildren forced to celebrate Ceausescu; and children's  |                                              |
| textbooks featuring first-page photographs of Ceausescu. These          |                                              |
| artifacts show how official culture sought to frame and control the     |                                              |
| experience and knowledge of childhood.                                  |                                              |
|                                                                         |                                              |
| *Conclusion.* I discuss children's literature in Communist Romania as   |                                              |
| a space in which writers dared to experiment, because children's books  |                                              |
| allowed writers to say uncomfortable things in playful or disguised     |                                              |
| ways.                                                                   |                                              |
|                                                                         |                                              |
|                                                                         |                                              |
| I contrast this with the ways the contemporary school system, in their  |                                              |
| censorship of e.g. history books, competed to shape children's worlds   |                                              |
| and knowledge, selecting the literature and history curriculum to       |                                              |
| reflect the ideology of the totalitarian government.                    |                                              |
|                                                                         |                                              |

** Collection
   :PROPERTIES:
   :CUSTOM_ID: collection
   :END:

*5 Items or more, to be described with Dublin Core metadata, including photos of your book:*

The collection is a set of at least 5 items that document your book and the context in which it was banned. Photographs of the book should be taken by yourself; the other photographs, you may find on museum websites and cite properly.

Some examples of objects that shed light on your book and the historical context of its production:

- If you are studying a book about bubonic plague in the middle ages, include images of plague-stricken cities or individuals, or maps of the plague's spread in the 14th century;

- If your book or work concerns AIDS in the US, include links to ACT UP and discuss its legacy in the formation of gay identity

- If your book concerns AIDS in South Africa, include a page o n the controversy over HIV in that country, and the paradoxical role of anti-colonial politics in the denigration of scientific explanation in the epidemic in that country

- If your book contains an imaginary plague (e.g. one that turns sufferers into vampires or zombies) include a page on the history of disease in horror films


** Exhibit

In every exhibit, at least four sections are mandatory: *Introduction*; */Book/*; *Context*; and *Insights*. You may include other sections if needed.

*** Introduction

This section is a summary of your exhibit, indicating what your book is, when it was banned, and why. 100-150 words. (A cleaned-up version of your proposal.)

*** Book

In this section, you describe your book and its author. What is its title? Who is its author? In detail and in your own words, summarize what the book is about. (size; shape; damage; marginal annotations, if any; illustrations, if any; other distinguishing marks, if any.) Your items in this section can be different photos of your book. Include as much descriptive detail as you can.

*** Context

In this section, you describe the social and historical context of your book: that is, the book's *time*, *place*, and *purpose*. When and where was it written? What text technologies were involved in its creation? To what effect? Who was its intended audience?  If the book is set in an earlier historical period, what specific comparisons did the author hope to ake with her contemporary era? Your exhibit items can include maps, photographs of people reading the book, photographs of people destroying the book, recordings, etc.

*** Insights

What insights (specific to your book---not a general conclusion that almost any other banned or endangered book could illustrate) into text technologies and the transmission of knowledge would you like your viewer to draw from your exhibit?

More specifically: how do the cultural and technical conditions in which the book was produced affect its impact and legacy?  how does the digital exhibit help you reflect on the text culture of your book?

Take a moment to think about how the work sheds light on the current crisis. You may find it difficult to 

*** Works Cited

This section contains resources---scholarly articles or museum articles or books---on which your exhibit draws. You may use any scholarly citation style you like, as long as you are consistent.

Example:

Gogata, Cristina. “Parallel Libraries Of The Former Securitate. Ana Blandiana, ‘Intamplari De Pe Strada Mea' (‘Events From My Street').” Studia Universitatis Babes-Bolyai. 61(2): 2006, pp. 97-100.

/Happy researching!/

** Books
   :PROPERTIES:
   :CUSTOM_ID: books
   :END:

You will select your work from [[https://docs.google.com/document/d/1UeAN5jhSib-CsP17keNC6c3iMF7PgE3KDDDBy24w0xY/edit?fbclid=IwAR3RpL3PfIhvp7b8YZB1uJp57kzJ71mDBbAvhv0meN5F9wLemiLffUIWpbI#heading=h.djjdbrh56zmt][The list of primary sources in this crowdsourced coronavirus syllabus]]. If you'd like to use another work, please make sure to talk to me!!

** Useful Resources

There are many, many places to tart looking but the [[https://github.com/DigitalHistory/current-plague/blob/develop/covid-resources-list.org#syllabi][syllabi o nthis list]] are an excellent starting point. 
** COMMENT Useful Resources

/Reference Works:/

- American Library Association. [[http://www.ala.org/advocacy/bbooks][Banned and Challenged Books]].

- Carefoote, Pearce J, and Alberto Manguel. /Nihil Obstat: An Exhibition of Banned, Censored & Challenged Books in the West, 1491-2000; Exhibition and Catalogue/. Toronto: University of Toronto Library, 2005. Print.

- /Censorship: 500 Years of Conflict/. New York, N.Y: Oxford University Press, 1984. Print.
- [[http://www.oxfordbibliographies.com.myaccess.library.utoronto.ca/view/document/obo-9780199791286/obo-9780199791286-0015.xml][Censorship]] (Oxford Bibliographies Online).

/Book & Image Repositories:/

- [[https://www.bl.uk/victorian-britain][British Library]]

- [[http://www.britishmuseum.org/research/collection_online.aspx][British Mueum]]

- [[https://dp.la/][Digital Public Library of America]]

- [[http://digital.bodleian.ox.ac.uk/][Digital Bodleian]]

- [[http://art.thewalters.org/browse/category/manuscript-and-rare-books/][Walters Art Museum]]

- [[http://www.metmuseum.org/art/collection][Metropolitan Museum in New York]]

- [[http://www.mfa.org/collections][Museum of Fine Arts Boston]]

** Rubric                                                           :rubric: 
- *Grade* ::
- Comments :: 
* Paper Assignment 1
* COMMENT Local Variables                          
# Local Variables:
# org-hugo-auto-export-on-save: t
# End:
